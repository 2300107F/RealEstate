// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Data;

#nullable disable

namespace RealEstate.Migrations
{
    [DbContext(typeof(RealEstateContext))]
    [Migration("20250122041657_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealEstate.Domain.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<string>("AgentPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Agent");

                    b.HasData(
                        new
                        {
                            AgentId = 1,
                            AgentPhoneNumber = "54326789",
                            CompanyId = 1,
                            Email = "LawrenceTan@gmail.com",
                            LicenseNumber = "S123456",
                            Name = "Lawrence Tan",
                            Password = "P@ssword1"
                        },
                        new
                        {
                            AgentId = 2,
                            AgentPhoneNumber = "87003840",
                            CompanyId = 1,
                            Email = "JonasLim@realestateagent.com",
                            LicenseNumber = "T246802",
                            Name = "Jonas Lim",
                            Password = "P@ssword1"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyAddress = "Queenstown Road",
                            CompanyName = "XYZ realestate",
                            CompanyPhoneNumber = "55555555"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyAddress = "Orchard Road",
                            CompanyName = "ABC Real Estate",
                            CompanyPhoneNumber = "55554444"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("FacilityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("FacilityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Facility");

                    b.HasData(
                        new
                        {
                            FacilityId = 1,
                            FacilityDescription = "Food centre for singaporean",
                            FacilityName = "Hawker",
                            RegionId = 1
                        },
                        new
                        {
                            FacilityId = 2,
                            FacilityName = "Gym",
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Inquiry", b =>
                {
                    b.Property<int>("InquiryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InquiryId"));

                    b.Property<DateTime>("DateOfInquiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InquiryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Inquiry");
                });

            modelBuilder.Entity("RealEstate.Domain.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int?>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("AgentId");

                    b.HasIndex("RegionId");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Address = "Tampines Blk 123",
                            AgentId = 1,
                            Bathrooms = 3,
                            Bedrooms = 5,
                            City = "Singapore",
                            PostalCode = "330022",
                            Price = 1000000,
                            PropertyType = "HDB",
                            RegionId = 1,
                            Sqft = 1100,
                            State = "Singapore",
                            Status = "Available"
                        },
                        new
                        {
                            PropertyId = 2,
                            Address = "Bedok Blk 456",
                            AgentId = 2,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            City = "Singapore",
                            PostalCode = "123456",
                            Price = 400000,
                            PropertyType = "HDB",
                            RegionId = 1,
                            Sqft = 700,
                            State = "Singapore",
                            Status = "Available"
                        },
                        new
                        {
                            PropertyId = 3,
                            Address = "Kallang Blk 123",
                            AgentId = 1,
                            Bathrooms = 2,
                            Bedrooms = 4,
                            City = "Singapore",
                            PostalCode = "364029",
                            Price = 750000,
                            PropertyType = "HDB",
                            RegionId = 2,
                            Sqft = 890,
                            State = "Singapore",
                            Status = "Sold"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.PropertyImage", b =>
                {
                    b.Property<int>("PropertyImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyImageId"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImage");
                });

            modelBuilder.Entity("RealEstate.Domain.PropertyTransaction", b =>
                {
                    b.Property<int>("PropertyTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyTransactionId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PropertyTransactionId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyTransaction");

                    b.HasData(
                        new
                        {
                            PropertyTransactionId = 1,
                            Amount = 800000,
                            PropertyId = 3,
                            TransactionDate = new DateTime(2025, 1, 22, 12, 16, 55, 827, DateTimeKind.Local).AddTicks(9455),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            RegionDescription = "Located on the east side of singapore",
                            RegionName = "East"
                        },
                        new
                        {
                            RegionId = 2,
                            RegionDescription = "The Singapore Central Region with towns like toa payoh",
                            RegionName = "Central"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateRegistered = new DateTime(2025, 1, 22, 12, 16, 55, 827, DateTimeKind.Local).AddTicks(7807),
                            Email = "JohnDoe@gmail.com",
                            Password = "P@ssword1",
                            UserName = "John",
                            UserPhoneNumber = "12345678"
                        },
                        new
                        {
                            UserId = 2,
                            DateRegistered = new DateTime(2025, 1, 22, 12, 16, 55, 827, DateTimeKind.Local).AddTicks(7828),
                            Email = "Samantha@gmail.com",
                            Password = "P@ssword1",
                            UserName = "Samantha",
                            UserPhoneNumber = "11111111"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Agent", b =>
                {
                    b.HasOne("RealEstate.Domain.Company", "Company")
                        .WithMany("Agents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealEstate.Domain.Facility", b =>
                {
                    b.HasOne("RealEstate.Domain.Region", "Region")
                        .WithMany("Facilities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RealEstate.Domain.Inquiry", b =>
                {
                    b.HasOne("RealEstate.Domain.Property", "Property")
                        .WithMany("PropertiesInquiries")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Domain.Property", b =>
                {
                    b.HasOne("RealEstate.Domain.Agent", "Agent")
                        .WithMany("AgentProperties")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Region", "Region")
                        .WithMany("Properties")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RealEstate.Domain.PropertyImage", b =>
                {
                    b.HasOne("RealEstate.Domain.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate.Domain.PropertyTransaction", b =>
                {
                    b.HasOne("RealEstate.Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Domain.Agent", b =>
                {
                    b.Navigation("AgentProperties");
                });

            modelBuilder.Entity("RealEstate.Domain.Company", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("RealEstate.Domain.Property", b =>
                {
                    b.Navigation("PropertiesInquiries");

                    b.Navigation("PropertyImages");
                });

            modelBuilder.Entity("RealEstate.Domain.Region", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
