@page "/properties/edit"
@using Microsoft.EntityFrameworkCore
@using RealEstate.Domain
@inject IDbContextFactory<RealEstate.Data.RealEstateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Property</h2>
<hr />
@if (Property is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Property" OnValidSubmit="UpdateProperty" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Property.PropertyId" value="@Property.PropertyId" />
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Property.Address" class="form-control" />
                    <ValidationMessage For="() => Property.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="state" class="form-label">State:</label>
                    <InputText id="state" @bind-Value="Property.State" class="form-control" />
                    <ValidationMessage For="() => Property.State" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="Property.City" class="form-control" />
                    <ValidationMessage For="() => Property.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="postalcode" class="form-label">PostalCode:</label>
                    <InputText id="postalcode" @bind-Value="Property.PostalCode" class="form-control" />
                    <ValidationMessage For="() => Property.PostalCode" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Property.Price" class="form-control" />
                    <ValidationMessage For="() => Property.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="propertytype" class="form-label">PropertyType:</label>
                    <InputText id="propertytype" @bind-Value="Property.PropertyType" class="form-control" />
                    <ValidationMessage For="() => Property.PropertyType" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bedrooms" class="form-label">Bedrooms:</label>
                    <InputNumber id="bedrooms" @bind-Value="Property.Bedrooms" class="form-control" />
                    <ValidationMessage For="() => Property.Bedrooms" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="bathrooms" class="form-label">Bathrooms:</label>
                    <InputNumber id="bathrooms" @bind-Value="Property.Bathrooms" class="form-control" />
                    <ValidationMessage For="() => Property.Bathrooms" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sqft" class="form-label">Sqft:</label>
                    <InputNumber id="sqft" @bind-Value="Property.Sqft" class="form-control" />
                    <ValidationMessage For="() => Property.Sqft" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Property.Status" class="form-control" />
                    <ValidationMessage For="() => Property.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="agentid" class="form-label">AgentId:</label>
                    <InputNumber id="agentid" @bind-Value="Property.AgentId" class="form-control" />
                    <ValidationMessage For="() => Property.AgentId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="regionid" class="form-label">RegionId:</label>
                    <InputNumber id="regionid" @bind-Value="Property.RegionId" class="form-control" />
                    <ValidationMessage For="() => Property.RegionId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/properties">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int PropertyId { get; set; }

    [SupplyParameterFromForm]
    private Property? Property { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Property ??= await context.Property.FirstOrDefaultAsync(m => m.PropertyId == PropertyId);

        if (Property is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProperty()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Property!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PropertyExists(Property!.PropertyId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/properties");
    }

    private bool PropertyExists(int propertyid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Property.Any(e => e.PropertyId == propertyid);
    }
}
