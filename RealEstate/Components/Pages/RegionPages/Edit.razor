@page "/regions/edit"
@using Microsoft.EntityFrameworkCore
@using RealEstate.Domain
@inject IDbContextFactory<RealEstate.Data.RealEstateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Region</h2>
<hr />
@if (Region is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Region" OnValidSubmit="UpdateRegion" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Region.RegionId" value="@Region.RegionId" />
                <div class="mb-3">
                    <label for="regionname" class="form-label">RegionName:</label>
                    <InputText id="regionname" @bind-Value="Region.RegionName" class="form-control" />
                    <ValidationMessage For="() => Region.RegionName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="regiondescription" class="form-label">RegionDescription:</label>
                    <InputText id="regiondescription" @bind-Value="Region.RegionDescription" class="form-control" />
                    <ValidationMessage For="() => Region.RegionDescription" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/regions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int RegionId { get; set; }

    [SupplyParameterFromForm]
    private Region? Region { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Region ??= await context.Region.FirstOrDefaultAsync(m => m.RegionId == RegionId);

        if (Region is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRegion()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Region!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RegionExists(Region!.RegionId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/regions");
    }

    private bool RegionExists(int regionid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Region.Any(e => e.RegionId == regionid);
    }
}
