@page "/agents/delete"
@using Microsoft.EntityFrameworkCore
@using RealEstate.Domain
@inject IDbContextFactory<RealEstate.Data.RealEstateContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Agent</h2>
    <hr />
    @if (agent is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@agent.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@agent.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@agent.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AgentPhoneNumber</dt>
            <dd class="col-sm-10">@agent.AgentPhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LicenseNumber</dt>
            <dd class="col-sm-10">@agent.LicenseNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CompanyId</dt>
            <dd class="col-sm-10">@agent.CompanyId</dd>
        </dl>
        <EditForm method="post" Model="agent" OnValidSubmit="DeleteAgent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(agent is null)">Delete</button> |
            <a href="/agents">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Agent? agent;

    [SupplyParameterFromQuery]
    private int AgentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        agent = await context.Agent.FirstOrDefaultAsync(m => m.AgentId == AgentId);

        if (agent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAgent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Agent.Remove(agent!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/agents");
    }
}
